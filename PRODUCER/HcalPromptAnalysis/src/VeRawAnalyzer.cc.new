#include <fstream>
#include <iostream>
#include <cmath>
#include <iosfwd>
#include <bitset>
#include <memory>

#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/PluginManager/interface/ModuleDef.h"
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"

#include "Geometry/Records/interface/HcalRecNumberingRecord.h"
#include "Geometry/CaloTopology/interface/HcalTopology.h"

#include "DataFormats/HcalDigi/interface/HcalDigiCollections.h"
#include "DataFormats/HcalDigi/interface/HcalQIESample.h"
#include "CalibFormats/HcalObjects/interface/HcalDbRecord.h"
#include "CalibFormats/HcalObjects/interface/HcalCoderDb.h"
#include "CalibFormats/HcalObjects/interface/HcalDbService.h"
#include "CondFormats/HcalObjects/interface/HcalQIECoder.h"

class VeRawAnalyzer : public edm::EDAnalyzer
{
public:
  explicit VeRawAnalyzer(const edm::ParameterSet&);
  ~VeRawAnalyzer();
  virtual void beginJob();
  virtual void analyze(const edm::Event&, const edm::EventSetup&);
  virtual void endJob() ;
  virtual void beginRun( const edm::Run& r, const edm::EventSetup& iSetup);
  virtual void endRun( const edm::Run& r, const edm::EventSetup& iSetup);
private:
  edm::EDGetTokenT<HcalCalibDigiCollection> tok_calib_;
  edm::EDGetTokenT<HBHEDigiCollection> tok_hbhe_;
  edm::EDGetTokenT<HODigiCollection> tok_ho_;
  edm::EDGetTokenT<HFDigiCollection> tok_hf_;

  edm::ESHandle<HcalDbService> conditions;
  const HcalQIEShape* shape;
  const HcalTopology* topo;
  int nevent;

// Output

  TTree*    myTree;
  TFile*    hOutputFile;
  ofstream MAPfile;

  


};
VeRawAnalyzer::VeRawAnalyzer(const edm::ParameterSet& iConfig)
{

  fOutputFileName   = iConfig.getUntrackedParameter<std::string>("HistOutFile");
  MAPOutputFileName = iConfig.getUntrackedParameter<std::string>("MAPOutFile");

// Tokens

  tok_calib_ = consumes<HcalCalibDigiCollection>(iConfig.getParameter<edm::InputTag>("hcalCalibDigiCollectionTag"));  //
  tok_hbhe_ = consumes<HBHEDigiCollection>(iConfig.getParameter<edm::InputTag>("hbheDigiCollectionTag"));
  tok_ho_ = consumes<HODigiCollection>(iConfig.getParameter<edm::InputTag>("hoDigiCollectionTag"));
  tok_hf_ = consumes<HFDigiCollection>(iConfig.getParameter<edm::InputTag>("hfDigiCollectionTag"));

// 
  verbosity     =  iConfig.getUntrackedParameter<int>("Verbosity");
  MAPcreation   =  iConfig.getUntrackedParameter<int>("MapCreation");

// Ntuple
  recordNtuples_=iConfig.getUntrackedParameter<bool>("recordNtuples");
  maxNeventsInNtuple_ = iConfig.getParameter<int>("maxNeventsInNtuple");

// Histogram
  recordHistoes_=iConfig.getUntrackedParameter<bool>("recordHistoes");

  studyRunDependenceHist_=iConfig.getUntrackedParameter<bool>("studyRunDependenceHist");
  studyCapIDErrorsHist_=iConfig.getUntrackedParameter<bool>("studyCapIDErrorsHist");
  studyRMSshapeHist_=iConfig.getUntrackedParameter<bool>("studyRMSshapeHist");
  studyRatioShapeHist_=iConfig.getUntrackedParameter<bool>("studyRatioShapeHist");
  studyTSmaxShapeHist_=iConfig.getUntrackedParameter<bool>("studyTSmaxShapeHist");
  studyTSmeanShapeHist_=iConfig.getUntrackedParameter<bool>("studyTSmeanShapeHist");
  studyDiffAmplHist_=iConfig.getUntrackedParameter<bool>("studyDiffAmplHist");
  studyCalibCellsHist_=iConfig.getUntrackedParameter<bool>("studyCalibCellsHist");
  studyADCAmplHist_=iConfig.getUntrackedParameter<bool>("studyADCAmplHist");
  studyPedestalsHist_=iConfig.getUntrackedParameter<bool>("studyPedestalsHist");
  studyPedestalCorrelations_=iConfig.getUntrackedParameter<bool>("studyPedestalCorrelations");
  useADCmassive_=iConfig.getUntrackedParameter<bool>("useADCmassive");
  useADCfC_=iConfig.getUntrackedParameter<bool>("useADCfC");
  useADCcounts_=iConfig.getUntrackedParameter<bool>("useADCcounts");
  usePedestalSubtraction_=iConfig.getUntrackedParameter<bool>("usePedestalSubtraction");
  usecontinuousnumbering_=iConfig.getUntrackedParameter<bool>("usecontinuousnumbering");

// CMT Quality Cuts
//
  flagabortgaprejected_ = iConfig.getParameter<int>("flagabortgaprejected");//
  bcnrejectedlow_ = iConfig.getParameter<int>("bcnrejectedlow");//
  bcnrejectedhigh_ = iConfig.getParameter<int>("bcnrejectedhigh");//
  flagtodefinebadchannel_ = iConfig.getParameter<int>("flagtodefinebadchannel");//
  howmanybinsonplots_ = iConfig.getParameter<int>("howmanybinsonplots");//
  splashesUpperLimit_ = iConfig.getParameter<int>("splashesUpperLimit");//

  flagtoaskrunsorls_ = iConfig.getParameter<int>("flagtoaskrunsorls");//
  flagestimatornormalization_ = iConfig.getParameter<int>("flagestimatornormalization");//
  flagcpuoptimization_ = iConfig.getParameter<int>("flagcpuoptimization");//

  ratioHBMin_      = iConfig.getParameter<double>("ratioHBMin");//
  ratioHBMax_      = iConfig.getParameter<double>("ratioHBMax");//
  ratioHEMin_      = iConfig.getParameter<double>("ratioHEMin");//
  ratioHEMax_      = iConfig.getParameter<double>("ratioHEMax");//
  ratioHFMin_      = iConfig.getParameter<double>("ratioHFMin");//
  ratioHFMax_      = iConfig.getParameter<double>("ratioHFMax");//
  ratioHOMin_      = iConfig.getParameter<double>("ratioHOMin");//
  ratioHOMax_      = iConfig.getParameter<double>("ratioHOMax");//

  lsdep_cut1_peak_HBdepth1_ = iConfig.getParameter<int>("lsdep_cut1_peak_HBdepth1");
  lsdep_cut1_peak_HBdepth2_ = iConfig.getParameter<int>("lsdep_cut1_peak_HBdepth2");
  lsdep_cut1_peak_HEdepth1_ = iConfig.getParameter<int>("lsdep_cut1_peak_HEdepth1");
  lsdep_cut1_peak_HEdepth2_ = iConfig.getParameter<int>("lsdep_cut1_peak_HEdepth2");
  lsdep_cut1_peak_HEdepth3_ = iConfig.getParameter<int>("lsdep_cut1_peak_HEdepth3");
  lsdep_cut1_peak_HFdepth1_ = iConfig.getParameter<int>("lsdep_cut1_peak_HFdepth1");
  lsdep_cut1_peak_HFdepth2_ = iConfig.getParameter<int>("lsdep_cut1_peak_HFdepth2");
  lsdep_cut1_peak_HOdepth4_ = iConfig.getParameter<int>("lsdep_cut1_peak_HOdepth4");

  lsdep_cut3_max_HBdepth1_ = iConfig.getParameter<int>("lsdep_cut3_max_HBdepth1");
  lsdep_cut3_max_HBdepth2_ = iConfig.getParameter<int>("lsdep_cut3_max_HBdepth2");
  lsdep_cut3_max_HEdepth1_ = iConfig.getParameter<int>("lsdep_cut3_max_HEdepth1");
  lsdep_cut3_max_HEdepth2_ = iConfig.getParameter<int>("lsdep_cut3_max_HEdepth2");
  lsdep_cut3_max_HEdepth3_ = iConfig.getParameter<int>("lsdep_cut3_max_HEdepth3");
  lsdep_cut3_max_HFdepth1_ = iConfig.getParameter<int>("lsdep_cut3_max_HFdepth1");
  lsdep_cut3_max_HFdepth2_ = iConfig.getParameter<int>("lsdep_cut3_max_HFdepth2");
  lsdep_cut3_max_HOdepth4_ = iConfig.getParameter<int>("lsdep_cut3_max_HOdepth4");

  lsdep_estimator1_HBdepth1_ = iConfig.getParameter<double>("lsdep_estimator1_HBdepth1");
  lsdep_estimator1_HBdepth2_ = iConfig.getParameter<double>("lsdep_estimator1_HBdepth2");
  lsdep_estimator1_HEdepth1_ = iConfig.getParameter<double>("lsdep_estimator1_HEdepth1");
  lsdep_estimator1_HEdepth2_ = iConfig.getParameter<double>("lsdep_estimator1_HEdepth2");
  lsdep_estimator1_HEdepth3_ = iConfig.getParameter<double>("lsdep_estimator1_HEdepth3");
  lsdep_estimator1_HFdepth1_ = iConfig.getParameter<double>("lsdep_estimator1_HFdepth1");
  lsdep_estimator1_HFdepth2_ = iConfig.getParameter<double>("lsdep_estimator1_HFdepth2");
  lsdep_estimator1_HOdepth4_ = iConfig.getParameter<double>("lsdep_estimator1_HOdepth4");

  lsdep_estimator2_HBdepth1_ = iConfig.getParameter<double>("lsdep_estimator2_HBdepth1");
  lsdep_estimator2_HBdepth2_ = iConfig.getParameter<double>("lsdep_estimator2_HBdepth2");
  lsdep_estimator2_HEdepth1_ = iConfig.getParameter<double>("lsdep_estimator2_HEdepth1");
  lsdep_estimator2_HEdepth2_ = iConfig.getParameter<double>("lsdep_estimator2_HEdepth2");
  lsdep_estimator2_HEdepth3_ = iConfig.getParameter<double>("lsdep_estimator2_HEdepth3");
  lsdep_estimator2_HFdepth1_ = iConfig.getParameter<double>("lsdep_estimator2_HFdepth1");
  lsdep_estimator2_HFdepth2_ = iConfig.getParameter<double>("lsdep_estimator2_HFdepth2");
  lsdep_estimator2_HOdepth4_ = iConfig.getParameter<double>("lsdep_estimator2_HOdepth4");

  lsdep_estimator3_HBdepth1_ = iConfig.getParameter<double>("lsdep_estimator3_HBdepth1");
  lsdep_estimator3_HBdepth2_ = iConfig.getParameter<double>("lsdep_estimator3_HBdepth2");
  lsdep_estimator3_HEdepth1_ = iConfig.getParameter<double>("lsdep_estimator3_HEdepth1");
  lsdep_estimator3_HEdepth2_ = iConfig.getParameter<double>("lsdep_estimator3_HEdepth2");
  lsdep_estimator3_HEdepth3_ = iConfig.getParameter<double>("lsdep_estimator3_HEdepth3");
  lsdep_estimator3_HFdepth1_ = iConfig.getParameter<double>("lsdep_estimator3_HFdepth1");
  lsdep_estimator3_HFdepth2_ = iConfig.getParameter<double>("lsdep_estimator3_HFdepth2");
  lsdep_estimator3_HOdepth4_ = iConfig.getParameter<double>("lsdep_estimator3_HOdepth4");

  lsdep_estimator4_HBdepth1_ = iConfig.getParameter<double>("lsdep_estimator4_HBdepth1");
  lsdep_estimator4_HBdepth2_ = iConfig.getParameter<double>("lsdep_estimator4_HBdepth2");
  lsdep_estimator4_HEdepth1_ = iConfig.getParameter<double>("lsdep_estimator4_HEdepth1");
  lsdep_estimator4_HEdepth2_ = iConfig.getParameter<double>("lsdep_estimator4_HEdepth2");
  lsdep_estimator4_HEdepth3_ = iConfig.getParameter<double>("lsdep_estimator4_HEdepth3");
  lsdep_estimator4_HFdepth1_ = iConfig.getParameter<double>("lsdep_estimator4_HFdepth1");
  lsdep_estimator4_HFdepth2_ = iConfig.getParameter<double>("lsdep_estimator4_HFdepth2");
  lsdep_estimator4_HOdepth4_ = iConfig.getParameter<double>("lsdep_estimator4_HOdepth4");

  lsdep_estimator5_HBdepth1_ = iConfig.getParameter<double>("lsdep_estimator5_HBdepth1");
  lsdep_estimator5_HBdepth2_ = iConfig.getParameter<double>("lsdep_estimator5_HBdepth2");
  lsdep_estimator5_HEdepth1_ = iConfig.getParameter<double>("lsdep_estimator5_HEdepth1");
  lsdep_estimator5_HEdepth2_ = iConfig.getParameter<double>("lsdep_estimator5_HEdepth2");
  lsdep_estimator5_HEdepth3_ = iConfig.getParameter<double>("lsdep_estimator5_HEdepth3");
  lsdep_estimator5_HFdepth1_ = iConfig.getParameter<double>("lsdep_estimator5_HFdepth1");
  lsdep_estimator5_HFdepth2_ = iConfig.getParameter<double>("lsdep_estimator5_HFdepth2");
  lsdep_estimator5_HOdepth4_ = iConfig.getParameter<double>("lsdep_estimator5_HOdepth4");
  forallestimators_amplitude_bigger_=iConfig.getParameter<double>("forallestimators_amplitude_bigger");

// RMT

  rmsHBMin_      = iConfig.getParameter<double>("rmsHBMin");//
  rmsHBMax_      = iConfig.getParameter<double>("rmsHBMax");//
  rmsHEMin_      = iConfig.getParameter<double>("rmsHEMin");//
  rmsHEMax_      = iConfig.getParameter<double>("rmsHEMax");//
  rmsHFMin_      = iConfig.getParameter<double>("rmsHFMin");//
  rmsHFMax_      = iConfig.getParameter<double>("rmsHFMax");//
  rmsHOMin_      = iConfig.getParameter<double>("rmsHOMin");//
  rmsHOMax_      = iConfig.getParameter<double>("rmsHOMax");//

  ADCAmplHBMin_ = iConfig.getParameter<double>("ADCAmplHBMin");//
  ADCAmplHEMin_ = iConfig.getParameter<double>("ADCAmplHEMin");//
  ADCAmplHOMin_ = iConfig.getParameter<double>("ADCAmplHOMin");//
  ADCAmplHFMin_ = iConfig.getParameter<double>("ADCAmplHFMin");//
  ADCAmplHBMax_ = iConfig.getParameter<double>("ADCAmplHBMax");//
  ADCAmplHEMax_ = iConfig.getParameter<double>("ADCAmplHEMax");//
  ADCAmplHOMax_ = iConfig.getParameter<double>("ADCAmplHOMax");//
  ADCAmplHFMax_ = iConfig.getParameter<double>("ADCAmplHFMax");//

  pedestalwHBMax_ = iConfig.getParameter<double>("pedestalwHBMax");//
  pedestalwHEMax_ = iConfig.getParameter<double>("pedestalwHEMax");//
  pedestalwHFMax_ = iConfig.getParameter<double>("pedestalwHFMax");//
  pedestalwHOMax_ = iConfig.getParameter<double>("pedestalwHOMax");//

  pedestalHBMax_ = iConfig.getParameter<double>("pedestalHBMax");//
  pedestalHEMax_ = iConfig.getParameter<double>("pedestalHEMax");//
  pedestalHFMax_ = iConfig.getParameter<double>("pedestalHFMax");//
  pedestalHOMax_ = iConfig.getParameter<double>("pedestalHOMax");//

  calibrADCHBMin_ = iConfig.getParameter<double>("calibrADCHBMin");//
  calibrADCHEMin_ = iConfig.getParameter<double>("calibrADCHEMin");//
  calibrADCHOMin_ = iConfig.getParameter<double>("calibrADCHOMin");//
  calibrADCHFMin_ = iConfig.getParameter<double>("calibrADCHFMin");//
  calibrADCHBMax_ = iConfig.getParameter<double>("calibrADCHBMax");//
  calibrADCHEMax_ = iConfig.getParameter<double>("calibrADCHEMax");//
  calibrADCHOMax_ = iConfig.getParameter<double>("calibrADCHOMax");//
  calibrADCHFMax_ = iConfig.getParameter<double>("calibrADCHFMax");//

  calibrRatioHBMin_ = iConfig.getParameter<double>("calibrRatioHBMin");//
  calibrRatioHEMin_ = iConfig.getParameter<double>("calibrRatioHEMin");//
  calibrRatioHOMin_ = iConfig.getParameter<double>("calibrRatioHOMin");//
  calibrRatioHFMin_ = iConfig.getParameter<double>("calibrRatioHFMin");//
  calibrRatioHBMax_ = iConfig.getParameter<double>("calibrRatioHBMax");//
  calibrRatioHEMax_ = iConfig.getParameter<double>("calibrRatioHEMax");//
  calibrRatioHOMax_ = iConfig.getParameter<double>("calibrRatioHOMax");//
  calibrRatioHFMax_ = iConfig.getParameter<double>("calibrRatioHFMax");//

  calibrTSmaxHBMin_ = iConfig.getParameter<double>("calibrTSmaxHBMin");//
  calibrTSmaxHEMin_ = iConfig.getParameter<double>("calibrTSmaxHEMin");//
  calibrTSmaxHOMin_ = iConfig.getParameter<double>("calibrTSmaxHOMin");//
  calibrTSmaxHFMin_ = iConfig.getParameter<double>("calibrTSmaxHFMin");//
  calibrTSmaxHBMax_ = iConfig.getParameter<double>("calibrTSmaxHBMax");//
  calibrTSmaxHEMax_ = iConfig.getParameter<double>("calibrTSmaxHEMax");//
  calibrTSmaxHOMax_ = iConfig.getParameter<double>("calibrTSmaxHOMax");//
  calibrTSmaxHFMax_ = iConfig.getParameter<double>("calibrTSmaxHFMax");//

  calibrTSmeanHBMin_ = iConfig.getParameter<double>("calibrTSmeanHBMin");//
  calibrTSmeanHEMin_ = iConfig.getParameter<double>("calibrTSmeanHEMin");//
  calibrTSmeanHOMin_ = iConfig.getParameter<double>("calibrTSmeanHOMin");//
  calibrTSmeanHFMin_ = iConfig.getParameter<double>("calibrTSmeanHFMin");//
  calibrTSmeanHBMax_ = iConfig.getParameter<double>("calibrTSmeanHBMax");//
  calibrTSmeanHEMax_ = iConfig.getParameter<double>("calibrTSmeanHEMax");//
  calibrTSmeanHOMax_ = iConfig.getParameter<double>("calibrTSmeanHOMax");//
  calibrTSmeanHFMax_ = iConfig.getParameter<double>("calibrTSmeanHFMax");//

  calibrWidthHBMin_ = iConfig.getParameter<double>("calibrWidthHBMin");//
  calibrWidthHEMin_ = iConfig.getParameter<double>("calibrWidthHEMin");//
  calibrWidthHOMin_ = iConfig.getParameter<double>("calibrWidthHOMin");//
  calibrWidthHFMin_ = iConfig.getParameter<double>("calibrWidthHFMin");//
  calibrWidthHBMax_ = iConfig.getParameter<double>("calibrWidthHBMax");//
  calibrWidthHEMax_ = iConfig.getParameter<double>("calibrWidthHEMax");//
  calibrWidthHOMax_ = iConfig.getParameter<double>("calibrWidthHOMax");//
  calibrWidthHFMax_ = iConfig.getParameter<double>("calibrWidthHFMax");//

  TSpeakHBMin_      = iConfig.getParameter<double>("TSpeakHBMin");//
  TSpeakHBMax_      = iConfig.getParameter<double>("TSpeakHBMax");//
  TSpeakHEMin_      = iConfig.getParameter<double>("TSpeakHEMin");//
  TSpeakHEMax_      = iConfig.getParameter<double>("TSpeakHEMax");//
  TSpeakHFMin_      = iConfig.getParameter<double>("TSpeakHFMin");//
  TSpeakHFMax_      = iConfig.getParameter<double>("TSpeakHFMax");//
  TSpeakHOMin_      = iConfig.getParameter<double>("TSpeakHOMin");//
  TSpeakHOMax_      = iConfig.getParameter<double>("TSpeakHOMax");//

  TSmeanHBMin_      = iConfig.getParameter<double>("TSmeanHBMin");//
  TSmeanHBMax_      = iConfig.getParameter<double>("TSmeanHBMax");//
  TSmeanHEMin_      = iConfig.getParameter<double>("TSmeanHEMin");//
  TSmeanHEMax_      = iConfig.getParameter<double>("TSmeanHEMax");//
  TSmeanHFMin_      = iConfig.getParameter<double>("TSmeanHFMin");//
  TSmeanHFMax_      = iConfig.getParameter<double>("TSmeanHFMax");//
  TSmeanHOMin_      = iConfig.getParameter<double>("TSmeanHOMin");//
  TSmeanHOMax_      = iConfig.getParameter<double>("TSmeanHOMax");//

  std::cout<<" Look on parameters you booked:" << std::endl;




}
VeRawAnalyzer::~VeRawAnalyzer()
{
}
void VeRawAnalyzer::beginRun( const edm::Run& r, const edm::EventSetup& iSetup)
{

}
void VeRawAnalyzer::endRun( const edm::Run& r, const edm::EventSetup& iSetup)
{

}
void VeRawAnalyzer::beginJob()
{
   nevent = 0;
}
void VeRawAnalyzer::endJob()
{
}
void VeRawAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup){


  if (nevent == 0) {
    edm::ESHandle<HcalTopology> topo_;
    iSetup.get<HcalRecNumberingRecord>().get(topo_);
    topo = &*topo_;
  }
     std::cout<<" Nevent = "<<nevent <<std::endl;
     nevent++;

}
DEFINE_FWK_MODULE(VeRawAnalyzer);
